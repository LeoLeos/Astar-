'''
@author: 方增烨
@date: 2018.11.14
@version: 1.0
'''

import numpy as np
import copy

#   判断是否为空
def isEmpty(node):
    if node == None:
        return False
    else:
        return True

#   判断是否目标节点
def isGoal(node, goal):
    if np.all(node == goal):
        return True
    else:
        return False

#   交换位置
def changePosition(node, pos1, pos2):
    temp = node[pos1[0]][pos1[1]]
    node[pos1[0]][pos1[1]] = node[pos2[0]][pos2[1]]
    node[pos2[0]][pos2[1]] = temp
    return node

#   获取空位置
def getPos(node, elem):
    for i in range(np.size(node, 0)):
        for j in range(np.size(node, 1)):
            if node[i][j] == elem:
                return i, j

#   展开下一步所有节点
def AllNode(node, closed):
    i, j = getPos(node, 0)  #0表示空模块
    node1 = np.array([[None, None, None],
                      [None, None, None],
                      [None, None, None]])
    node2 = np.array([[None, None, None],
                      [None, None, None],
                      [None, None, None]])
    node3 = np.array([[None, None, None],
                      [None, None, None],
                      [None, None, None]])
    node4 = np.array([[None, None, None],
                      [None, None, None],
                      [None, None, None]])
    if i-1 >= 0:
        node1 = copy.deepcopy(node)
        node1 = copy.deepcopy(changePosition(node1, [i, j], [i-1, j]))
        save(closed, node1)
    if i+1 <= 2:
        node2 = copy.deepcopy(node)
        node2 = copy.deepcopy(changePosition(node2, [i, j], [i+1, j]))
        save(closed, node2)
    if j-1 >= 0:
        node3 = copy.deepcopy(node)
        node3 = copy.deepcopy(changePosition(node3, [i, j], [i, j-1]))
        save(closed, node3)
    if j+1 <= 2:
        node4 = copy.deepcopy(node)
        node4 = copy.deepcopy(changePosition(node4, [i, j], [i, j+1]))
        save(closed, node4)
    return node1, node2, node3, node4, closed

def Cost(goal, node):
    cost = 0    #记录代价

    for i in range(np.size(node, 0)):
        for j in range(np.size(node, 1)):
            x, y = getPos(goal, node[i][j])
            cost = cost + np.abs(i-x) + np.abs(j-y)
    return cost

#   计算从初始状态到当前状态的代价
def gCost(initNode, node):
    return Cost(initNode, node)

#   计算当前状态到目标状态的代价
def hCost(goal, node):
    return Cost(goal, node)

#   计算总代价
def fCost(initNode, node, goal):
    return gCost(initNode, node) + hCost(goal, node)


def newnode(node1, node2, node3, node4, closed):

    node = np.array([node1, node2, node3, node4])
    for i in range(len(node)):
        if node[i] in closed:
            node = np.delete(node, node[i])
    #print(np.reshape(node, (-1, 3)))
    return np.reshape(node, (-1, 3))

#   选取最近节点
def bestNode(node1, node2, node3, node4, initNode, goal, closed):
    node = newnode(node1, node2, node3, node4, closed)
    #cost = [fCost(initNode, x, goal) for x in newnode(node1, node2, node3, node4, closed)]
    cost = [x for x in newnode(node1, node2, node3, node4, closed)]
    print(cost)
    return node[node.index(min(cost))]

def save(node, newNode):
    #print(node)
    #print(newNode)
    node = np.append(node, newNode, 0)
    return node

def isClosed(node, closed):
    num = np.size(closed, 0)    #记录行数
    for i in range(int(num/3)):
        if np.all(node == closed[3*i:3*i+3]):return True
        else:return False





